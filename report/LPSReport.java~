package report;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import core.DTNHost;
import core.Message;
import core.MessageListener;
import core.SimClock;

public class LPSReport extends Report implements MessageListener{
	private int totalDrops;
	private int beforeThreshold;
			
	public FIFOBlockingCDFReport(){
        totalDrops = 0;
        beforeThreshold = 0;
	}
	@Override
	public void newMessage(Message m) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void messageTransferStarted(Message m, DTNHost from, DTNHost to) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void messageDeleted(Message m, DTNHost where, boolean dropped) {
		if (dropped){
            totalDrops++;            
            if (m.getGlobalNumberOfReplicas()<5) {
                beforeThreshold++;
            }
        }
	}

	@Override
	public void messageTransferAborted(Message m, DTNHost from, DTNHost to) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void messageTransferred(Message m, DTNHost from, DTNHost to,
			boolean firstDelivery) {
    }
    
    @Override
    public void done(){
        write("total:"+totalDrops);
        write("before threshold:"+beforeThreshold);
        write((beforeThreshold*100.0)/totalDrops);
    }
}
